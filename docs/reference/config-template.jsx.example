from pathlib import Path

styled_code = """import React, { useEffect, useState } from 'react';
import ForgeReconciler, { Text, TextArea, Button, Link, Box, DynamicTable } from '@forge/react';
import { invoke } from '@forge/bridge';

/**
 * Presentation helpers
 */
const Section = ({ title, children, spacing = 'space.400' }) => (
  <Box paddingTop={spacing}>
    {title ? <Text size="medium" weight="bold">{title}</Text> : null}
    <Box paddingTop="space.200">{children}</Box>
  </Box>
);

const FieldRow = ({ label, children }) => (
  <Box paddingTop="space.150">
    <Text weight="bold">{label}</Text>
    <Box paddingTop="space.100">{children}</Box>
  </Box>
);

const ValueBox = ({ children }) => (
  <Box
    padding="space.150"
    style={{
      background: '#FFFFFF',
      border: '1px solid #DFE1E6',
      borderRadius: 3,
    }}
  >
    <Text>{children}</Text>
  </Box>
);

const Panel = ({ children, tone = 'neutral' }) => {
  const bg = tone === 'neutral' ? '#F7F8F9' : tone === 'info' ? '#F1F5FF' : '#F7F8F9';
  return (
    <Box
      padding="space.200"
      style={{
        background: bg,
        border: '1px solid #DFE1E6',
        borderRadius: 3,
      }}
    >
      {children}
    </Box>
  );
};

const ConfigApp = () => {
  const [projectName, setProjectName] = useState('');
  const [technicalDesignDoc, setTechnicalDesignDoc] = useState('');
  const [projectTechnology, setProjectTechnology] = useState('Jira app / VSCode extension');

  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [saveMessage, setSaveMessage] = useState('');

  const [isEditingTechDoc, setIsEditingTechDoc] = useState(false);
  const [tempTechDoc, setTempTechDoc] = useState('');

  useEffect(() => {
    const loadConfiguration = async () => {
      setIsLoading(true);
      try {
        const currentProjectName = await invoke('getCurrentProjectName');
        setProjectName(currentProjectName || '');

        const config = await invoke('getConfiguration');
        if (config) {
          setTechnicalDesignDoc(config.technicalDesignDoc || '');
          setTempTechDoc(config.technicalDesignDoc || '');
          setProjectTechnology(config.projectTechnology || 'Jira app / VSCode extension');
        }
      } catch (error) {
        console.error('Error loading configuration:', error);
        setSaveMessage('Error loading configuration');
      }
      setIsLoading(false);
    };

    loadConfiguration();
  }, []);

  const handleSave = async () => {
    setIsSaving(true);
    setSaveMessage('');
    try {
      const configData = {
        projectName,
        technicalDesignDoc,
        projectTechnology
      };
      await invoke('saveConfiguration', { config: configData });
      setSaveMessage('Configuration saved successfully!');
    } catch (error) {
      console.error('Error saving configuration:', error);
      setSaveMessage('Error saving configuration');
    }
    setIsSaving(false);
  };

  const handleEditTechDoc = () => {
    setTempTechDoc(technicalDesignDoc);
    setIsEditingTechDoc(true);
  };

  const handleConfirmTechDoc = async () => {
    try {
      await invoke('saveTechnicalDesignDoc', { technicalDesignDoc: tempTechDoc });
      setTechnicalDesignDoc(tempTechDoc);
      setIsEditingTechDoc(false);
      setSaveMessage('Technical Design Document saved successfully!');
      setTimeout(() => setSaveMessage(''), 3000);
    } catch (error) {
      console.error('Error saving technical design document:', error);
      setSaveMessage('Error saving technical design document');
    }
  };

  const handleCancelTechDoc = () => {
    setTempTechDoc(technicalDesignDoc);
    setIsEditingTechDoc(false);
  };

  if (isLoading) return <Text>Loading configuration...</Text>;

  return (
    <Box padding="space.400">
      {/* Title */}
      <Text size="xlarge" weight="bold">AI Coder 114</Text>

      {/* Configuration Section */}
      <Section title="Configuration">
        <FieldRow label="Project Name">
          <ValueBox>{projectName || '—'}</ValueBox>
        </FieldRow>
        <FieldRow label="Technical Design Document">
          {isEditingTechDoc ? (
            <Box>
              <TextArea
                value={tempTechDoc}
                onChange={(e) => setTempTechDoc(e.target.value)}
                placeholder="Enter Confluence URL (https://...)"
                rows={2}
                disabled={isSaving}
              />
              <Box paddingTop="space.100">
                <Button appearance="primary" onClick={handleConfirmTechDoc} disabled={isSaving}>
                  Save
                </Button>
                <Button appearance="subtle" onClick={handleCancelTechDoc} disabled={isSaving}>
                  Cancel
                </Button>
              </Box>
            </Box>
          ) : (
            <Box>
              {technicalDesignDoc && technicalDesignDoc.startsWith('http') ? (
                <Link href={technicalDesignDoc} target="_blank">{technicalDesignDoc}</Link>
              ) : (
                <Text>Click “Edit” to add a Confluence link</Text>
              )}
              <Box paddingTop="space.100">
                <Button appearance="link" onClick={handleEditTechDoc} disabled={isSaving}>
                  Edit
                </Button>
              </Box>
            </Box>
          )}
        </FieldRow>
      </Section>

      {/* Convert action */}
      <Box paddingTop="space.400">
        <Button
          appearance="primary"
          onClick={() => console.log('Convert action here')}
          disabled={!technicalDesignDoc || !technicalDesignDoc.startsWith('http')}
        >
          Convert to Epics and Stories
        </Button>
      </Box>

      {/* Results */}
      <Section title="Generated Epics and Stories">
        <Panel>
          <Text>Converted epics and stories will appear here…</Text>
        </Panel>
      </Section>

      {/* Bottom Save */}
      <Box paddingTop="space.400">
        <Button appearance="primary" onClick={handleSave} disabled={isSaving}>
          {isSaving ? 'Saving…' : 'Save Configuration'}
        </Button>
      </Box>
    </Box>
  );
};

ForgeReconciler.render(
  <React.StrictMode>
    <ConfigApp />
  </React.StrictMode>
);
"""

out = Path("/mnt/data/config.styled.jsx")
out.write_text(styled_code)
out.as_posix()
